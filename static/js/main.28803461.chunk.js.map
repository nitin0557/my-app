{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","react_default","a","createElement","className","concat","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","mode","href","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","heading","onChange","event","target","value","backgroundColor","rows","newText","showAlert","replace","m","navigator","clipboard","writeText","split","join","filter","element","length","defaultProps","aboutText","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","document","body","components_Alert","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.28803461.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Alert(props) {\n  \n      const capitalize =(word)=>\n      {\n          let lower = word.toLowerCase();\n          return lower.charAt(0).toUpperCase() + lower.slice(1);\n\n      }\n     return (\n      props.alert &&  <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n            <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\n           \n            </div>\n//     <div className=\"alert alert-warning alert-dismissible fade show\" role=\"alert\">\n//   <strong>{props.alert}</strong>\n//   <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\n// </div>\n    \n  )\n}\n\nexport default Alert","import React from 'react'\nimport PropTypes from 'prop-types'\n//import {Link} from 'react-router-dom'\n\nexport default function Navbar(props) {\n  return (\n     \n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n            <div className=\"container-fluid\">\n                <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link\" aria-current=\"page\" href=\"#\">Home</a>\n                        </li>\n                         {/* <li className=\"nav-item\">\n                            <a className=\"nav-link\" href=\"#\">{props.aboutText}</a>\n                        </li>  */}\n                    </ul>\n                    <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\n                    </div>\n                </div>\n            </div>\n        </nav>\n  \n  )\n}\n\nNavbar.propTypes =\n{\n    title : PropTypes.string.isRequired,\n    aboutText : PropTypes.string.isRequired\n}\nNavbar.defaultProps =\n{\n    title : 'Set title here',\n    aboutText : 'About'\n}\n\n","import React, {useState} from 'react'\n\n\nexport default function TextForm(props)\n {\n  \n\n     const handleUpClick = () => {\n         let newText = text.toUpperCase();\n         setText(newText)\n         props.showAlert(\"uppercase\",\"success\");\n         \n\n     }\n     const handleloClick = () => {\n        let newText = text.toLowerCase();\n        setText(newText)\n        props.showAlert(\"lowercase\",\"success\");\n\n    }\n\n     const handleOnchange = (event) =>{\n         setText(event.target.value);\n    }\n    const handlereset = () =>{\n         setText(\"\");\n         props.showAlert(\"Reset\",\"success\");\n   }\n   const capitalize = () =>\n    {\n    // storing the first char of the string\n  // converting that to uppercase\n    setText(\n        text.replace(/(^\\w|\\s\\w)/g, m => m.toUpperCase())\n    ); // printing it with rest excluding the first char by using slice\n    props.showAlert(\"Capitalized\",\"success\");\n   }\n   \n   \n   const handleCopy = () => {\n    \n     navigator.clipboard.writeText(text);\n     props.showAlert(\"Copied to Clipboard\",\"success\");\n    \n   }\n  const handleExtraSpaces = () => {\n    let newText = text.split(/[ ]+/);\n    setText(newText.join(\" \"));\n    props.showAlert(\"Removed Extra Spaces\",\"success\");\n    \n  }\n  const [text ,setText] = useState('');\n  return (\n    <>\n    <div className=\"container\" style={{color :props.mode === 'dark'? 'white': '#042743'}}>\n           <h1 >{props.heading}</h1>\n\n            <div className=\"mb-3\">\n            <textarea className=\"form-control\" onChange ={handleOnchange} style={{backgroundColor :props.mode === 'dark'? 'grey': 'white'\n             ,color :props.mode === 'dark'? 'white': '#042743' }}value={text} id=\"myBox \" rows=\"8\"></textarea>\n            </div>\n            <button className=\"btn btn-primary\" onClick={handleUpClick}>Convert to Upper Case </button>\n            <button className=\"btn btn-primary mx-3\" onClick={handleloClick}>Convert to Lower Case </button>\n            <button className=\"btn btn-primary mx-0\" onClick={handlereset} >Clear </button>\n            <button className=\"btn btn-primary mx-2\" onClick={capitalize} >Auto Capitalize </button>\n             <button className=\"btn btn-primary mx-2\" onClick={handleCopy} >Copy Text </button> \n            <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpaces} >Remove Extra Spaces </button>\n    </div>\n            <div className=\"container\">\n\n            <h1>Text Summary</h1>\n            <p>{text.split(\" \").filter((element)=>{return element.length!==0}).length} words and {text.length} characters</p>\n            <p>{0.008 *  text.split(\" \").length} minutes to read </p>\n            <h1>PREVIEW</h1>\n            <p>{text.length >0 ?text:\"Enter something in the the text box \"}</p>\n            \n            </div>\n \n\n   \n</>\n        \n  )\n}\n","\nimport React, { useState } from 'react';\nimport './App.css';\nimport Alert from './components/Alert';\n//import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n\n\n//  import {\n//   BrowserRouter as Router,\n//  Switch,\n//   Route,\n// } from \"react-router-dom\";\n \nfunction App() {\n  const [mode, setMode] = useState('light');\n const [alert, setAlert] = useState(null);\n\n  const showAlert =(message,type) =>\n  {\n     setAlert(\n       {\n         msg : message,\n         type : type\n       })\n       setTimeout(() => {\n         setAlert(null);\n       }, 1500);\n  }\n  \n  const toggleMode= ()=>\n  {\n    if(mode === 'light')\n    {\n      setMode('dark');\n      document.body.style.backgroundColor= 'grey';\n      showAlert(\"Dark mode enabled\",\"success\");\n    }\n    \n  else\n  {\n    setMode('light');\n    document.body.style.backgroundColor='white';\n   showAlert(\"light mode enabled\",\"success\");\n    }\n  }\n \n  return (\n\n <>\n  {/* <Router>  */}\n  <Navbar title=\"My App\" mode ={mode} toggleMode = {toggleMode}/>\n  <Alert alert={alert}/>  \n  <div className=\"container my-3\">\n   {/* <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n        \n          <Route path=\"/\">\n            \n    \n \n          </Route>\n         \n    </Switch>   */}\n     <TextForm showAlert={showAlert} heading =\"Enter your text here\" mode={mode}/>\n    </div>\n     {/* </Router>  */}\n    \n    \n       \n      \n  \n </> \n    \n\n    \n  );\n}\n\nexport default App;\n ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}